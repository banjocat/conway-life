This is a Conway Life Demo written as a Jquery plugin.

A simple example would be done like below
var = life $('selector').life({
    xmax:25,
    ymax:25,
    box_size:10,
});

To restart it, only works correctly with initial: 'random'
life.restart();



This is done completly client side.
For small amount of users server side would be quicker,
but having a hundread people running this would make the server
have a difficult time keeping up.  If storage was not an issue,
a server could store set patterns to make computation quicker.

This is broken up into two files.
life.js
Contains the algorithm and is designed to work seperate from
the graphical part. The algorithm used is very simple. I do
not claim it to be the quickest Life algorithm but it was easy
to implement and debug. It keeps track of all the cells that
are currently alive and only runs the algorithm on them.
It has O(n) complexity where n is the number of cells currently alive.
Its average case and worst case are the same.  Because cells are always
depleting on large boards it will start to pick up speed as the game
progresses.

graphic-life.js
Contains the graphic portion of the app. I used pixi.js for the
graphic engine, I found it more than quick enough to handle what
I threw at it. It uses WebGL to render quickly. 

Other libraries I used are, jquery and underscore.js. I use underscore.js
a lot in my projects I find the utility functions very helpful.


There are unit_tests which if the project is checked out can be run going
to the test.html. The actual javascript containing the tests is located in the
js directory. I always try to write unit tests I think it helps a lot with design.

THINGS THAT COULD OF BEEN
The code is setup for setting cells to specific values to start.
Which is done in the unit_tests but I had issues working with pixi.js.
I decided to have it at a working state right now over fixing something
that was not part of the project.

I did add restart so that refershing the page is not required to have
it run again.
